{"version":3,"sources":["forgot-password.js","login-email.js","login-facebook.js","login-google.js","register.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChfile":"authentication.js","sourcesContent":["//reset password]\r\n$(document).ready(function () {\r\n    $('#password_Form').bootstrapValidator({\r\n\r\n            feedbackIcons: {\r\n                valid: 'glyphicon glyphicon-ok',\r\n                invalid: 'glyphicon glyphicon-remove',\r\n                validating: 'glyphicon glyphicon-refresh'\r\n            },\r\n            fields: {\r\n                email: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Email is required'\r\n                        },\r\n                        \r\n                        remote: {\r\n                            message: 'That email is not registered',\r\n                            url: base_url + \"/auth/emailExist\",\r\n                            type: 'POST'\r\n                        },\r\n\r\n                        regexp: {\r\n                            regexp: '^[^@\\\\s]+@([^@\\\\s]+\\\\.)+[^@\\\\s]+$',\r\n                            message: 'The value is not a valid email address'\r\n                        }\r\n                    }\r\n                },           \r\n            },\r\n        })\r\n        .on('success.form.bv', function (e) {\r\n            // Prevent form submission\r\n            e.preventDefault();\r\n\r\n            // Get the form instance\r\n            var $form = $(e.target);\r\n\r\n            // Get the BootstrapValidator instance\r\n            var bv = $form.data('bootstrapValidator');\r\n\r\n            email = $(\"#email\").val();\r\n           \r\n            $.ajax({\r\n                type: \"POST\",\r\n                url: base_url + \"/email/resetPassword\",                 \r\n                dataType: 'json', // expected returned data format.\r\n                data: {\r\n                    \r\n                    email: email,\r\n                  \r\n                },\r\n                //timeout: 5000, // timeout set to 5 seconds\r\n                success: function (data) {\r\n                    console.log(data.message);\r\n\r\n                    if (data.valid === 'true') {\r\n                        location.reload();\r\n                        closeAllDialogs();\r\n                        displaySuccessDialog();\r\n                    } else {\r\n                        console.log(data);\r\n                        $(\"#register_error\").removeClass(\"hidden\").addClass(\"visible\");\r\n                        $('#register_error').html('<i class=\"fa fa-exclamation-triangle\"></i> An error has occured. Please try again.');\r\n\r\n                    }\r\n                },\r\n                error: function (xhr, status, error) {\r\n                    console.log(error);\r\n                    closeAllDialogs();\r\n                    $(\"#register_error\").removeClass(\"hidden\").addClass(\"visible\");\r\n                    $('#register_error').html('<i class=\"fa fa-exclamation-triangle\"></i> Error: ' + error);\r\n                }\r\n            });\r\n   \r\n            return false;\r\n        });\r\n});\r\n","/*\r\n *  Filename: login-email.js\r\n *  ---------------------------------------\r\n *\r\n *  Author: Thomas Davison\r\n *  Date: Jan 27, 2016\r\n *  Description: This script handles the form submission for the login-form located in the login modal\r\n *\r\n *  Fields: login_form_email, login_form_password, login_form_remember\r\n *\r\n */\r\n\r\n$(document).ready(function () {\r\n    $('#login_form').bootstrapValidator({\r\n        feedbackIcons: {\r\n            valid: 'glyphicon glyphicon-ok',\r\n            invalid: 'glyphicon glyphicon-remove',\r\n            validating: 'glyphicon glyphicon-refresh'\r\n        },\r\n        excluded: [':disabled'],\r\n        fields: {\r\n\r\n            login_form_email: {\r\n                validators: {\r\n                    notEmpty: {\r\n                        message: 'Email is required'\r\n                    },\r\n                    regexp: {\r\n                        regexp: '^[^@\\\\s]+@([^@\\\\s]+\\\\.)+[^@\\\\s]+$',\r\n                        message: 'The value is not a valid email address'\r\n                    }\r\n                }\r\n            },\r\n\r\n            login_form_password: {\r\n                validators: {\r\n                    notEmpty: {\r\n                        message: 'Password is required'\r\n                    },\r\n                    stringLength: {\r\n                        min: 6,\r\n                        message: 'Must be at least 6 characters'\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    })\r\n\r\n    .on('success.form.bv', function (e) {\r\n        // Prevent form submission\r\n        e.preventDefault();\r\n        // Get the form instance\r\n        var $form = $(e.target);\r\n        // Get the BootstrapValidator instance\r\n        var bv = $form.data('bootstrapValidator');\r\n\r\n        email = $(\"#login_form_email\").val();\r\n        password = $(\"#login_form_password\").val();\r\n        remember_me = $(\"#login_form_remember\").val();\r\n\r\n        $.ajax({\r\n            type: \"post\",\r\n            url: base_url + \"/auth/login\",\r\n            dataType: 'json', // expected returned data format.\r\n            data: {\r\n                email: email,\r\n                password: password,\r\n                remember_me: remember_me,\r\n            },\r\n            timeout: 5000, // timeout set to 5 seconds\r\n            success: function (data) {\r\n                closeAllDialogs();\r\n\r\n                console.log('login-email: ' + data.message);\r\n                if (data.valid === 'true') {\r\n                    window.location.reload();\r\n                    displaySuccessDialog();\r\n                } else {\r\n                    $('#login_form').data('bootstrapValidator').resetForm();\r\n                    console.log('login-email data.valid != true: ' + data);\r\n\r\n                    $(\"#login_error\").removeClass(\"hidden\").addClass(\"visible\");\r\n                    $('#login_error').html('<i class=\"fa fa-exclamation-triangle\"></i> You have entered an incorrect password');\r\n\r\n                    $('#login_form').data('bootstrapValidator').resetForm();\r\n                    $(\"#login_form_password\").val(null);\r\n                    $('#login_modal').modal('show');\r\n                    console.log('login-email data.valid != true END');\r\n                }\r\n            },\r\n            error: function (xhr, status, error) {\r\n                console.log('login-email error: ' + error);\r\n                closeAllDialogs();\r\n                $(\"#login_error\").removeClass(\"hidden\").addClass(\"visible\");\r\n                $('#login_error').html('<i class=\"fa fa-exclamation-triangle\"></i> Error: ' + error);\r\n                $('#login_modal').modal('show');\r\n            },\r\n            beforeSend: function () {\r\n                console.log('login-email: Submitting token to server.');\r\n                //$('#login_modal').modal('hide'); Keeps the form hidden, even after .modal('show') is run \r\n                displayLoadingDialog();\r\n            }\r\n        });\r\n        return false;\r\n\r\n    });\r\n});\r\n","/*\r\n *  Filename: login-facebook.js\r\n *  ---------------------------------------\r\n *\r\n *  Author: Thomas Davison\r\n *  Date: Jan 27, 2016\r\n *  Description: This script gets a token from facebook after a user logins and submits it to the server to be used by the backend\r\n *\r\n */\r\n\r\n\r\nwindow.fbAsyncInit = function () {\r\n    FB.init({\r\n        appId: '726168714129895',\r\n        xfbml: true,\r\n        version: 'v2.2'\r\n    });\r\n\r\n\r\n    FB.getLoginStatus(function (response) {\r\n        if (response.status === 'connected') {\r\n            //console.log(response.authResponse.accessToken);\r\n            // Logged into your app and Facebook.\r\n            console.log('Logged into app and Facebook');\r\n        } else if (response.status === 'not_authorized') {\r\n            // The person is logged into Facebook, but not your app.\r\n            console.log('Logged into Facebook, but not app');\r\n        } else {\r\n            // The person is not logged into Facebook, so we're not sure if\r\n            // they are logged into this app or not.\r\n            console.log('Not logged into Facebook, so we\\'re not sure if they are logged into this app');\r\n        }\r\n    });\r\n};\r\n\r\n(function (d, s, id) {\r\n    var js, fjs = d.getElementsByTagName(s)[0];\r\n    if (d.getElementById(id)) {\r\n        return;\r\n    }\r\n    js = d.createElement(s);\r\n    js.id = id;\r\n    js.src = \"//connect.facebook.net/en_US/sdk.js\";\r\n    fjs.parentNode.insertBefore(js, fjs);\r\n}(document, 'script', 'facebook-jssdk'));\r\n\r\nfunction fb_login() {\r\n\r\n    FB.login(function (response) {\r\n\r\n        if (response.authResponse) {\r\n\r\n            access_token = response.authResponse.accessToken; //get access token\r\n\r\n            console.log('Token: ' + access_token);\r\n            FB.api('/me', function (response) {\r\n                $.ajax({\r\n                    type: \"POST\",\r\n                    url: base_url + '/auth/facebook',\r\n                    dataType: 'json',\r\n                    data: {\r\n                        token: access_token\r\n                    },\r\n                    timeout: 5000, // timeout set to 5 seconds\r\n                    success: function (data) {\r\n\r\n                        console.log(data.message);\r\n                        if (data.valid === 'true') {\r\n\r\n                            window.location.reload();\r\n                            closeAllDialogs();\r\n                            displaySuccessDialog();\r\n\r\n                        } else {\r\n\r\n                            console.log(data);\r\n                            closeAllDialogs();\r\n                            $('#login_modal').modal('show');\r\n\r\n                        }\r\n                    },\r\n                    error: function (xhr, status, error) {\r\n\r\n                        console.log(error);\r\n                        closeAllDialogs();\r\n                        $(\"#login_error\").removeClass(\"hidden\").addClass(\"visible\");\r\n                        $('#login_error').html('<i class=\"fa fa-exclamation-triangle\"></i> Error: ' + error);\r\n                        $('#login_modal').modal('show');\r\n\r\n                    },\r\n                    beforeSend: function () {\r\n\r\n                        console.log('Submitting token to server.');\r\n                        $('#login_modal').modal('hide');\r\n                        displayLoadingDialog();\r\n\r\n                    }\r\n\r\n                });\r\n            });\r\n\r\n        } else {\r\n            console.log('User cancelled login or did not fully authorize.');\r\n        }\r\n    }, {\r\n        scope: 'email,public_profile'\r\n    });\r\n\r\n}\r\n\r\n/*\r\n *  fb_logout()\r\n *  ---------------------------------------\r\n *\r\n *  Signs the user our of facebook\r\n *\r\n */\r\n\r\nfunction fb_logout() {\r\n    FB.logout(function (response) {\r\n        console.log('User signed out of facebook.');\r\n    });\r\n}\r\n","/*\r\n *  Filename: login-google.js\r\n *  ---------------------------------------\r\n *\r\n *  Author: Thomas Davison\r\n *  Date: Jan 27, 2016\r\n *  Description: This script gets a token from google after a user logins and submits it to the server to be used by the backend\r\n *\r\n */\r\n\r\n\r\nvar googleUser = {};\r\n\r\n// Initalize the sign in settings\r\nvar startApp = function () {\r\n    gapi.load('auth2', function () {\r\n        // Retrieve the singleton for the GoogleAuth library and set up the client.\r\n        auth2 = gapi.auth2.init({\r\n            client_id: '61758773854-t25ukdlf334hen4po09k5sju4v3ds4gg.apps.googleusercontent.com',\r\n        });\r\n\r\n        attachSignin(document.getElementById('btn-google'));\r\n    });\r\n};\r\n\r\n// Attach sign in to button\r\nfunction attachSignin(element) {\r\n    auth2.attachClickHandler(element, {},\r\n        function (googleUser) {\r\n            onSignIn(googleUser); // Call the Onsign in function\r\n        },\r\n        function (error) {\r\n            alert(JSON.stringify(error, undefined, 2));\r\n        });\r\n}\r\n\r\n// On succesfull sign in\r\nfunction onSignIn(googleUser) {\r\n\r\n    access_token = googleUser.getAuthResponse().id_token; //get access token\r\n    console.log('Token: ' + access_token);\r\n    $.ajax({\r\n        type: \"POST\",\r\n        url: base_url + '/auth/google',\r\n        dataType: 'json',\r\n        data: {\r\n            token: access_token\r\n        },\r\n        timeout: 5000, // timeout set to 5 seconds\r\n        success: function (data) {\r\n\r\n            console.log(data.message);\r\n            if (data.valid === 'true') {\r\n\r\n                window.location.reload();\r\n                closeAllDialogs();\r\n                displaySuccessDialog();\r\n\r\n            } else {\r\n\r\n                console.log(data);\r\n                closeAllDialogs();\r\n                $('#login_modal').modal('show');\r\n\r\n            }\r\n        },\r\n        error: function (xhr, status, error) {\r\n\r\n            console.log(error);\r\n            closeAllDialogs();\r\n            $(\"#login_error\").removeClass(\"hidden\").addClass(\"visible\");\r\n            $('#login_error').html('<i class=\"fa fa-exclamation-triangle\"></i> Error: ' + error);\r\n            $('#login_modal').modal('show');\r\n\r\n        },\r\n        beforeSend: function () {\r\n\r\n            console.log('Submitting token to server.');\r\n            $('#login_modal').modal('hide');\r\n            displayLoadingDialog();\r\n\r\n        }\r\n    });\r\n\r\n}\r\n\r\n\r\n// Sign out of google\r\nfunction google_logout() {\r\n    var auth2 = gapi.auth2.getAuthInstance();\r\n    auth2.signOut().then(function () {\r\n        console.log('User signed out of google on app.');\r\n    });\r\n}\r\n// Start app\r\nstartApp();\r\n","// Validation for the registraion part of the modal\r\n$(document).ready(function () {\r\n    $('#register_form').bootstrapValidator({\r\n\r\n            feedbackIcons: {\r\n                valid: 'glyphicon glyphicon-ok',\r\n                invalid: 'glyphicon glyphicon-remove',\r\n                validating: 'glyphicon glyphicon-refresh'\r\n            },\r\n            fields: {\r\n                register_email: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Email is required'\r\n                        },\r\n\r\n                        remote: {\r\n                            message: 'That email is already registered',\r\n                            url: base_url + \"/auth/emailCheck\",\r\n                            type: 'POST'\r\n                        },\r\n                        regexp: {\r\n                            regexp: '^[^@\\\\s]+@([^@\\\\s]+\\\\.)+[^@\\\\s]+$',\r\n                            message: 'The value is not a valid email address'\r\n                        }\r\n                    }\r\n                },\r\n                register_first: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'First name is required'\r\n                        },\r\n                        regexp: {\r\n                            regexp: /^[-'a-zA-Z\\s]+$/,\r\n                            message: 'Must contain only alpbabetical characters, \\', and \\-'\r\n                        }\r\n                    }\r\n                },\r\n                register_last: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Last name is required'\r\n                        },\r\n                        regexp: {\r\n                            regexp: /^[-'a-zA-Z\\s]+$/,\r\n                            message: 'Must contain only alpbabetical characters, \\', and \\-'\r\n                        }\r\n                    }\r\n                },\r\n\r\n                register_confirm: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Please confirm password'\r\n                        },\r\n                        stringLength: {\r\n                            min: 6,\r\n                            message: 'Must be at least 6 characters'\r\n                        },\r\n                        identical: {\r\n                            field: 'register_password',\r\n                        }\r\n                    }\r\n                },\r\n                register_password: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Password is required'\r\n                        },\r\n                        stringLength: {\r\n                            min: 6,\r\n                            message: 'Must be at least 6 characters'\r\n                        },\r\n                        identical: {\r\n                            field: 'register_confirm',\r\n                        }\r\n                    }\r\n                },\r\n                register_agree: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: 'Please accept our terms of service'\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n\r\n        })\r\n        .on('success.form.bv', function (e) {\r\n            // Prevent form submission\r\n            e.preventDefault();\r\n\r\n            // Get the form instance\r\n            var $form = $(e.target);\r\n\r\n            // Get the BootstrapValidator instance\r\n            var bv = $form.data('bootstrapValidator');\r\n\r\n            first_name = $(\"#register_first\").val();\r\n            last_name = $(\"#register_last\").val();\r\n            email = $(\"#register_email\").val();\r\n            password = $(\"#register_password\").val();\r\n\r\n            $.ajax({\r\n                type: \"POST\",\r\n                url: base_url + \"/auth/register\",\r\n                dataType: 'json', // expected returned data format.\r\n                data: {\r\n                    first_name: first_name,\r\n                    last_name: last_name,\r\n                    email: email,\r\n                    password: password,\r\n                },\r\n                timeout: 5000, // timeout set to 5 seconds\r\n                success: function (data) {\r\n                    console.log(data.message);\r\n\r\n                    if (data.valid === 'true') {\r\n                        location.reload();\r\n                        closeAllDialogs();\r\n                        displaySuccessDialog();\r\n                         $.ajax({\r\n                            type: \"POST\",\r\n                            url: base_url + \"/modals/registration\",\r\n                            dataType: 'json', // expected returned data format.\r\n                            data: {\r\n                                first_name: first_name,\r\n                                last_name: last_name,\r\n                                email: email,\r\n                            }\r\n                        });\r\n                    } else {\r\n                        console.log(data);\r\n                        $(\"#register_error\").removeClass(\"hidden\").addClass(\"visible\");\r\n                        $('#register_error').html('<i class=\"fa fa-exclamation-triangle\"></i> An error has occured. Please try again.');\r\n\r\n                        $('#register-modal').modal('show');\r\n                    }\r\n                },\r\n                error: function (xhr, status, error) {\r\n                    console.log(error);\r\n                    closeAllDialogs();\r\n                    $(\"#register_error\").removeClass(\"hidden\").addClass(\"visible\");\r\n                    $('#register_error').html('<i class=\"fa fa-exclamation-triangle\"></i> Error: ' + error);\r\n                    $('#register_modal').modal('show');\r\n                },\r\n                beforeSend: function () {\r\n                    console.log('Attempting registration');\r\n                    $('#register_modal').modal('hide');\r\n                    displayLoadingDialog();\r\n                }\r\n            });\r\n        \r\n            return false;\r\n        });\r\n});\r\n"],"sourceRoot":"/source/"}